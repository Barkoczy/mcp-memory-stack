apiVersion: v1
kind: Secret
metadata:
  name: mcp-secrets
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # PostgreSQL credentials (base64 encoded)
  # Replace with actual values: echo -n "your_value" | base64
  POSTGRES_USER: "{{ .Values.secrets.postgres.user | b64enc }}"
  POSTGRES_PASSWORD: "{{ .Values.secrets.postgres.password | b64enc }}"
  POSTGRES_DB: "{{ .Values.secrets.postgres.database | b64enc }}"
  DATABASE_URL: "{{ .Values.secrets.postgres.url | b64enc }}"

  # API Keys for services
  MCP_API_KEY: "{{ .Values.secrets.api.mcp | b64enc }}"
  RUST_API_KEY: "{{ .Values.secrets.api.rust | b64enc }}"

  # JWT Secret
  JWT_SECRET: "{{ .Values.secrets.jwt.secret | b64enc }}"

  # Qdrant API Key (optional)
  QDRANT_API_KEY: "{{ .Values.secrets.qdrant.key | b64enc }}"

  # Jaeger Authentication
  JAEGER_USER: "{{ .Values.secrets.jaeger.user | b64enc }}"
  JAEGER_PASSWORD: "{{ .Values.secrets.jaeger.password | b64enc }}"

  # Grafana Admin Credentials
  GRAFANA_ADMIN_USER: "{{ .Values.secrets.grafana.user | b64enc }}"
  GRAFANA_ADMIN_PASSWORD: "{{ .Values.secrets.grafana.password | b64enc }}"

  # Prometheus Basic Auth
  PROMETHEUS_USER: "{{ .Values.secrets.prometheus.user | b64enc }}"
  PROMETHEUS_PASSWORD: "{{ .Values.secrets.prometheus.password | b64enc }}"

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key (base64 encoded)
  # Replace with actual certificates in production
  tls.crt: "{{ .Values.secrets.tls.cert | b64enc }}"
  tls.key: "{{ .Values.secrets.tls.key | b64enc }}"

---
apiVersion: v1
kind: Secret
metadata:
  name: image-pull-secret
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry credentials for private images
  .dockerconfigjson: "{{ .Values.secrets.docker.config | b64enc }}"

---
# Service Account for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-service-account
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: auth
imagePullSecrets:
  - name: image-pull-secret

---
# ClusterRole for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mcp-cluster-role
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: auth
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints", "configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["monitoring.coreos.com"]
    resources: ["servicemonitors", "prometheusrules"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

---
# ClusterRoleBinding for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mcp-cluster-role-binding
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: auth
subjects:
  - kind: ServiceAccount
    name: mcp-service-account
    namespace: mcp-memory-stack
roleRef:
  kind: ClusterRole
  name: mcp-cluster-role
  apiGroup: rbac.authorization.k8s.io
