apiVersion: v1
kind: Secret
metadata:
  name: mcp-secrets
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # PostgreSQL credentials (base64 encoded)
  POSTGRES_USER: bWNwX3VzZXI= # mcp_user
  POSTGRES_PASSWORD: bWNwX3Bhc3N3b3JkXzIwMjU= # mcp_password_2025
  POSTGRES_DB: bWNwX21lbW9yeQ== # mcp_memory
  DATABASE_URL: cG9zdGdyZXNxbDovL21jcF91c2VyOm1jcF9wYXNzd29yZF8yMDI1QHBvc3RncmVzcWwtc2VydmljZTo1NDMyL21jcF9tZW1vcnk= # postgresql://mcp_user:mcp_password_2025@postgresql-service:5432/mcp_memory

  # API Keys for services
  MCP_API_KEY: bWNwX2FwaV9rZXlfZW50ZXJwcmlzZV8yMDI1 # mcp_api_key_enterprise_2025
  RUST_API_KEY: cnVzdF9hcGlfa2V5X2VudGVycHJpc2VfMjAyNQ== # rust_api_key_enterprise_2025

  # JWT Secret
  JWT_SECRET: and0X3NlY3JldF9zdXBlcl9zZWN1cmVfZW50ZXJwcmlzZV8yMDI1X2tleQ== # jwt_secret_super_secure_enterprise_2025_key

  # Qdrant API Key (optional)
  QDRANT_API_KEY: cWRyYW50X2FwaV9rZXlfZW50ZXJwcmlzZV8yMDI1 # qdrant_api_key_enterprise_2025

  # Jaeger Authentication
  JAEGER_USER: amFlZ2VyX3VzZXI= # jaeger_user
  JAEGER_PASSWORD: amFlZ2VyX3Bhc3N3b3JkXzIwMjU= # jaeger_password_2025

  # Grafana Admin Credentials
  GRAFANA_ADMIN_USER: YWRtaW4= # admin
  GRAFANA_ADMIN_PASSWORD: Z3JhZmFuYV9hZG1pbl8yMDI1 # grafana_admin_2025

  # Prometheus Basic Auth
  PROMETHEUS_USER: cHJvbWV0aGV1c19hZG1pbg== # prometheus_admin
  PROMETHEUS_PASSWORD: cHJvbWV0aGV1c19wYXNzd29yZF8yMDI1 # prometheus_password_2025

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key (base64 encoded)
  # These should be replaced with actual certificates in production
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi4uLgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t

---
apiVersion: v1
kind: Secret
metadata:
  name: image-pull-secret
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry credentials for private images
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5jb21wYW55LmNvbSI6eyJ1c2VybmFtZSI6Im1jcF91c2VyIiwicGFzc3dvcmQiOiJtY3BfcGFzc3dvcmQiLCJhdXRoIjoiYlc5amNGOTFjMlZ5T20xamNGOXdZWE56ZDI5eVpBPT0ifX19

---
# Service Account for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-service-account
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: auth
imagePullSecrets:
  - name: image-pull-secret

---
# ClusterRole for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mcp-cluster-role
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: auth
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints", "configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["monitoring.coreos.com"]
    resources: ["servicemonitors", "prometheusrules"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

---
# ClusterRoleBinding for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mcp-cluster-role-binding
  labels:
    app.kubernetes.io/name: mcp-memory-stack
    app.kubernetes.io/component: auth
subjects:
  - kind: ServiceAccount
    name: mcp-service-account
    namespace: mcp-memory-stack
roleRef:
  kind: ClusterRole
  name: mcp-cluster-role
  apiGroup: rbac.authorization.k8s.io
