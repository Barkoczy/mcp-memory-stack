apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 20Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "2.48.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
        - name: prometheus
          image: prom/prometheus:v2.48.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9090
              name: web
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--storage.tsdb.retention.time=30d"
            - "--storage.tsdb.retention.size=15GB"
            - "--web.enable-lifecycle"
            - "--web.enable-admin-api"
            - "--query.max-concurrency=50"
            - "--query.timeout=2m"
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
              readOnly: true
            - name: prometheus-storage
              mountPath: /prometheus
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

      volumes:
        - name: prometheus-config
          configMap:
            name: mcp-config
            items:
              - key: prometheus.yml
                path: prometheus.yml
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: web
  selector:
    app.kubernetes.io/name: prometheus

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
    app.kubernetes.io/version: "10.2.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: visualization
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
        - name: grafana
          image: grafana/grafana:10.2.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: web
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: mcp-secrets
                  key: GRAFANA_ADMIN_USER
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mcp-secrets
                  key: GRAFANA_ADMIN_PASSWORD
            - name: GF_DATABASE_TYPE
              value: sqlite3
            - name: GF_DATABASE_PATH
              value: /var/lib/grafana/grafana.db
            - name: GF_SESSION_PROVIDER
              value: file
            - name: GF_SESSION_PROVIDER_CONFIG
              value: /var/lib/grafana/sessions
            - name: GF_ANALYTICS_REPORTING_ENABLED
              value: "false"
            - name: GF_ANALYTICS_CHECK_FOR_UPDATES
              value: "false"
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel,grafana-clock-panel"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana/provisioning
              readOnly: true
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-config
          configMap:
            name: grafana-config

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: web
  selector:
    app.kubernetes.io/name: grafana

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: tracing
    app.kubernetes.io/version: "1.50"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/component: tracing
    spec:
      serviceAccountName: mcp-service-account
      containers:
        - name: jaeger
          image: jaegertracing/all-in-one:1.50
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 16686
              name: ui
            - containerPort: 14268
              name: collector
            - containerPort: 6831
              name: agent-compact
              protocol: UDP
            - containerPort: 6832
              name: agent-binary
              protocol: UDP
            - containerPort: 5778
              name: agent-config
          env:
            - name: COLLECTOR_OTLP_ENABLED
              value: "true"
            - name: COLLECTOR_ZIPKIN_HOST_PORT
              value: ":9411"
            - name: SPAN_STORAGE_TYPE
              value: "memory"
            - name: MEMORY_MAX_TRACES
              value: "50000"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /
              port: 16686
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 16686
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-service
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: tracing
spec:
  type: ClusterIP
  ports:
    - port: 16686
      targetPort: 16686
      protocol: TCP
      name: ui
    - port: 14268
      targetPort: 14268
      protocol: TCP
      name: collector
    - port: 6831
      targetPort: 6831
      protocol: UDP
      name: agent-compact
    - port: 6832
      targetPort: 6832
      protocol: UDP
      name: agent-binary
    - port: 5778
      targetPort: 5778
      protocol: TCP
      name: agent-config
  selector:
    app.kubernetes.io/name: jaeger

---
# Separate service for collector endpoint
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: tracing
spec:
  type: ClusterIP
  ports:
    - port: 14268
      targetPort: 14268
      protocol: TCP
      name: collector
  selector:
    app.kubernetes.io/name: jaeger

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        editable: true
        jsonData:
          timeInterval: "5s"
          queryTimeout: "60s"
          httpMethod: GET

      - name: Jaeger
        type: jaeger
        access: proxy
        url: http://jaeger-service:16686
        editable: true
        jsonData:
          tracesToLogsV2:
            datasourceUid: 'loki'
            spanStartTimeShift: '1h'
            spanEndTimeShift: '-1h'
            tags: ['job', 'instance', 'pod', 'namespace']
            filterByTraceID: false
            filterBySpanID: false

  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'MCP Memory Stack'
        orgId: 1
        folder: 'MCP'
        folderUid: mcp_folder
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /etc/grafana/provisioning/dashboards
