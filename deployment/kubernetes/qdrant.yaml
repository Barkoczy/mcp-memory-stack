apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qdrant-pvc
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: qdrant
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
    app.kubernetes.io/version: "1.7.0"
spec:
  serviceName: qdrant-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: qdrant
  template:
    metadata:
      labels:
        app.kubernetes.io/name: qdrant
        app.kubernetes.io/component: vector-database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "6333"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-service-account
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsNonRoot: true
      containers:
        - name: qdrant
          image: qdrant/qdrant:v1.7.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6333
              name: http
            - containerPort: 6334
              name: grpc
          env:
            - name: QDRANT__SERVICE__HTTP_PORT
              value: "6333"
            - name: QDRANT__SERVICE__GRPC_PORT
              value: "6334"
            - name: QDRANT__SERVICE__MAX_REQUEST_SIZE_MB
              value: "32"
            - name: QDRANT__SERVICE__ENABLE_CORS
              value: "true"
            - name: QDRANT__STORAGE__STORAGE_PATH
              value: "/qdrant/storage"
            - name: QDRANT__STORAGE__SNAPSHOTS_PATH
              value: "/qdrant/snapshots"
            - name: QDRANT__STORAGE__ON_DISK_PAYLOAD
              value: "true"
            - name: QDRANT__STORAGE__WAL__WAL_CAPACITY_MB
              value: "32"
            - name: QDRANT__CLUSTER__ENABLED
              value: "false"
            - name: QDRANT__TELEMETRY__DISABLED
              value: "false"
          volumeMounts:
            - name: qdrant-storage
              mountPath: /qdrant/storage
            - name: qdrant-snapshots
              mountPath: /qdrant/snapshots
            - name: qdrant-config
              mountPath: /qdrant/config/production.yaml
              subPath: qdrant-config.yaml
              readOnly: true
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /
              port: 6333
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 6333
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /
              port: 6333
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 30

      volumes:
        - name: qdrant-storage
          persistentVolumeClaim:
            claimName: qdrant-pvc
        - name: qdrant-snapshots
          emptyDir: {}
        - name: qdrant-config
          configMap:
            name: mcp-config
            items:
              - key: qdrant-config.yaml
                path: qdrant-config.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: qdrant-service
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "6333"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - port: 6333
      targetPort: 6333
      protocol: TCP
      name: http
    - port: 6334
      targetPort: 6334
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: qdrant

---
# Headless service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: qdrant-headless
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 6333
      targetPort: 6333
      protocol: TCP
      name: http
    - port: 6334
      targetPort: 6334
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: qdrant

---
# Network Policy for Qdrant
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: qdrant-network-policy
  namespace: mcp-memory-stack
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: vector-database
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: qdrant
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow connections from embedding services
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: rust-embedding-service
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: fastify-service
      ports:
        - protocol: TCP
          port: 6333
        - protocol: TCP
          port: 6334
    # Allow prometheus scraping
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 6333
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
    # Allow outbound connections for snapshots and backups
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
